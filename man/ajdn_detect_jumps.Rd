% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AJDN_Functions.R
\name{ajdn_detect_jumps}
\alias{ajdn_detect_jumps}
\title{Use AJDN to detect jumps}
\usage{
ajdn_detect_jumps(
  x_matrix,
  s,
  s_prime,
  B,
  alpha,
  filter_matrix_list = NULL,
  loud = NULL,
  num_cores = NULL,
  output_bootstraps_and_teststat = NULL,
  bootstrap_normal_seed = NULL,
  cp_delete_c = 0.01,
  ss_refine_alpha_tilde = 1.5
)
}
\arguments{
\item{x_matrix}{\eqn{p} x \eqn{n} (\eqn{p} = # dimensions, \eqn{n} = # obsrevations) matrix of time series}

\item{s}{a vector of scales to test, or a list of scales where each item in
list corresponds to vector of scales for that dimension. Scales should be in (0,0.5)}

\item{s_prime}{block size parameter. \eqn{2ns'} is equal to number total number of observations
in each block of the block bootstrap}

\item{B}{number of bootstraps to use in calculation of critical value}

\item{alpha}{desired type I error}

\item{filter_matrix_list}{OPTIONAL argument, input should be the the list output from create_filter_matrix_function. This is used
to speed up instances where AJDN is being run multiple times with same \eqn{n,p,s} as creating the filter matrix can
be computationally intensive.}

\item{loud}{OPTIONAL argument, if loud=TRUE then print out progress of AJDN algorithm as it runs, and each jump detected}

\item{num_cores}{OPTIONAL argument, number of cores to parallelize computation across, if only using 1 core leave as NULL.}

\item{output_bootstraps_and_teststat}{OPTIONAL argument, if set to TRUE the function returns max test stat and all initial bootstraps
(used to examine behaviour of algorithm)}

\item{bootstrap_normal_seed}{OPTIONAL argument, a seed to set before generating the standard normal random variables for the bootstrap}

\item{cp_delete_c}{constant used when deleting a neighbourhood around an already detected jump}

\item{ss_refine_alpha_tilde}{constant related to the second stage refinement}
}
\value{
dataframe of jumps detected
}
\description{
Detects jumps using AJDN algorithm
}
\examples{
print('write example here')
}
